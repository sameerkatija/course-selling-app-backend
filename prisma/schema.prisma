generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  first_name     String
  last_name      String
  createdAt      DateTime        @default(now())

  // Relations
  roles          UserRole[]      @relation("UserHasRoles")
  rolesAssigned  UserRole[]      @relation("UserAssignedRoles")
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  adminProfile   AdminProfile?
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique    // 'student', 'teacher', 'admin'
  description String?
  users       UserRole[]
}

model UserRole {
  id            String   @id @default(uuid())

  // The user receiving the role
  user          User     @relation("UserHasRoles", fields: [userId], references: [id])
  userId        String

  // The role being assigned
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        String

  // The user who assigned the role (admin/teacher/self)
  assignedBy    User     @relation("UserAssignedRoles", fields: [assignedById], references: [id])
  assignedById  String

  assignedAt    DateTime @default(now())
}

model StudentProfile {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  bio      String?
}

model TeacherProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bio       String?
  expertise String[] // Tags like 'React', 'Python'
  status    String   // 'pending', 'approved', 'rejected'
  rating    Float?
}

model AdminProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  isSuper   Boolean  @default(false)
}
